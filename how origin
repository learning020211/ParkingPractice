[33mcommit 3170a56cbaff994aa555f1d01a0e0d39e47f9b30[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;31morigin/master[m[33m)[m
Author: Steven Peng <steven020211@gmail.com>
Date:   Sat May 7 07:30:10 2022 +0800

    Âä†ÂÖ•Â∞àÊ°àÊ™îÊ°à„ÄÇ

[1mdiff --git a/ParkingPractice.sln b/ParkingPractice.sln[m
[1mnew file mode 100644[m
[1mindex 0000000..3a3e63c[m
[1m--- /dev/null[m
[1m+++ b/ParkingPractice.sln[m
[36m@@ -0,0 +1,31 @@[m
[32m+[m[32mÔªø[m
[32m+[m[32mMicrosoft Visual Studio Solution File, Format Version 12.00[m
[32m+[m[32m# Visual Studio Version 17[m
[32m+[m[32mVisualStudioVersion = 17.1.32421.90[m
[32m+[m[32mMinimumVisualStudioVersion = 10.0.40219.1[m
[32m+[m[32mProject("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ParkingPractice", "ParkingPractice\ParkingPractice.csproj", "{6183BD07-B13A-48C1-8B03-DAA21C97BA7F}"[m
[32m+[m[32mEndProject[m
[32m+[m[32mProject("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ParkingPracticeTests", "ParkingPracticeTests\ParkingPracticeTests.csproj", "{09455173-AD53-44F5-959D-C8562ECD3333}"[m
[32m+[m[32mEndProject[m
[32m+[m[32mGlobal[m
[32m+[m	[32mGlobalSection(SolutionConfigurationPlatforms) = preSolution[m
[32m+[m		[32mDebug|Any CPU = Debug|Any CPU[m
[32m+[m		[32mRelease|Any CPU = Release|Any CPU[m
[32m+[m	[32mEndGlobalSection[m
[32m+[m	[32mGlobalSection(ProjectConfigurationPlatforms) = postSolution[m
[32m+[m		[32m{6183BD07-B13A-48C1-8B03-DAA21C97BA7F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU[m
[32m+[m		[32m{6183BD07-B13A-48C1-8B03-DAA21C97BA7F}.Debug|Any CPU.Build.0 = Debug|Any CPU[m
[32m+[m		[32m{6183BD07-B13A-48C1-8B03-DAA21C97BA7F}.Release|Any CPU.ActiveCfg = Release|Any CPU[m
[32m+[m		[32m{6183BD07-B13A-48C1-8B03-DAA21C97BA7F}.Release|Any CPU.Build.0 = Release|Any CPU[m
[32m+[m		[32m{09455173-AD53-44F5-959D-C8562ECD3333}.Debug|Any CPU.ActiveCfg = Debug|Any CPU[m
[32m+[m		[32m{09455173-AD53-44F5-959D-C8562ECD3333}.Debug|Any CPU.Build.0 = Debug|Any CPU[m
[32m+[m		[32m{09455173-AD53-44F5-959D-C8562ECD3333}.Release|Any CPU.ActiveCfg = Release|Any CPU[m
[32m+[m		[32m{09455173-AD53-44F5-959D-C8562ECD3333}.Release|Any CPU.Build.0 = Release|Any CPU[m
[32m+[m	[32mEndGlobalSection[m
[32m+[m	[32mGlobalSection(SolutionProperties) = preSolution[m
[32m+[m		[32mHideSolutionNode = FALSE[m
[32m+[m	[32mEndGlobalSection[m
[32m+[m	[32mGlobalSection(ExtensibilityGlobals) = postSolution[m
[32m+[m		[32mSolutionGuid = {4EAA4CEA-8683-4905-9F3E-17570C7F0CF6}[m
[32m+[m	[32mEndGlobalSection[m
[32m+[m[32mEndGlobal[m
[1mdiff --git a/ParkingPractice/ParkingPractice.csproj b/ParkingPractice/ParkingPractice.csproj[m
[1mnew file mode 100644[m
[1mindex 0000000..74abf5c[m
[1m--- /dev/null[m
[1m+++ b/ParkingPractice/ParkingPractice.csproj[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32m<Project Sdk="Microsoft.NET.Sdk">[m
[32m+[m
[32m+[m[32m  <PropertyGroup>[m
[32m+[m[32m    <OutputType>Exe</OutputType>[m
[32m+[m[32m    <TargetFramework>net6.0</TargetFramework>[m
[32m+[m[32m    <ImplicitUsings>enable</ImplicitUsings>[m
[32m+[m[32m    <Nullable>enable</Nullable>[m
[32m+[m[32m  </PropertyGroup>[m
[32m+[m
[32m+[m[32m</Project>[m
[1mdiff --git a/ParkingPractice/Program.cs b/ParkingPractice/Program.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..b41487b[m
[1m--- /dev/null[m
[1m+++ b/ParkingPractice/Program.cs[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32mÔªø// See https://aka.ms/new-console-template for more information[m
[32m+[m
[32m+[m[32mConsole.WriteLine("Hello");[m
\ No newline at end of file[m
[1mdiff --git a/ParkingPractice/Solution.cs b/ParkingPractice/Solution.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..1ca0a7a[m
[1m--- /dev/null[m
[1m+++ b/ParkingPractice/Solution.cs[m
[36m@@ -0,0 +1,110 @@[m
[32m+[m[32mÔªøpublic class ParkingFee[m
[32m+[m[32m{[m
[32m+[m[32m    public IEnumerable<SingleDayFee> Items { get; private set; }[m
[32m+[m[32m    public int TotalFee => Items.Sum(item => item.Fee);[m
[32m+[m
[32m+[m[32m    public ParkingFee(IEnumerable<SingleDayFee> multipleDayFees)[m
[32m+[m[32m    {[m
[32m+[m[32m        Items = multipleDayFees;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m// ÂñÆÊó•ÂÅúËªäË≥áË®ä[m
[32m+[m[32mpublic class SingleDayFee[m
[32m+[m[32m{[m
[32m+[m[32m    public DateTime StartTime { get; set; } // Á≤æÁ¢∫Âà∞ÂàÜÈêòÁöÑÂÖ•Â†¥ÊôÇÈñì[m
[32m+[m[32m    public DateTime EndTime { get; set; } // Á≤æÁ¢∫Âà∞ÂàÜÈêòÁöÑÈõ¢Â†¥ÊôÇÈñì[m
[32m+[m[32m    public int Fee { get; set; } // Êú¨Êó•ÊáâÊî∂ÂèñË≤ªÁî®[m
[32m+[m
[32m+[m[32m    public SingleDayFee(DateTime start, DateTime end, Func<DateTime, DateTime, int> getFee)[m
[32m+[m[32m    {[m
[32m+[m[32m        StartTime = start;[m
[32m+[m[32m        EndTime = end;[m
[32m+[m[32m        Fee = getFee(start, end);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mpublic class Solution[m
[32m+[m[32m{[m
[32m+[m[32m    #region Q3 Ë®àÁÆóË∑®Êó•ÁöÑÂÅúËªäË≤ª[m
[32m+[m[32m    public ParkingFee CalcParkingFee(DateTime start, DateTime end)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (end < start) throw new ArgumentException();[m
[32m+[m
[32m+[m[32m        start = start.SkipToMinutes();[m
[32m+[m[32m        end = end.SkipToMinutes();[m
[32m+[m
[32m+[m[32m        List<SingleDayFee> fees = new List<SingleDayFee>();[m
[32m+[m
[32m+[m[32m        var currentStart = start;[m
[32m+[m[32m        var currentEnd = start.DateEnd().CompareAndTakeSmaller(end);[m
[32m+[m
[32m+[m[32m        //Á¨¨‰∏ÄÂ§©[m
[32m+[m[32m        fees.Add(new SingleDayFee(currentStart, currentEnd, CalcFee));[m
[32m+[m[32m        void shiftNextDay()[m
[32m+[m[32m        {[m
[32m+[m[32m            currentStart = currentStart.NextDateStart();[m
[32m+[m[32m            currentEnd = currentStart.DateEnd();[m
[32m+[m[32m        };[m
[32m+[m[32m        //‰∏≠ÈñìÂ§©Êï∏[m
[32m+[m[32m        for (shiftNextDay();[m
[32m+[m[32m            currentEnd < end;[m
[32m+[m[32m            shiftNextDay())[m
[32m+[m[32m            fees.Add(new SingleDayFee(currentStart, currentEnd, (_, _) => FEE_MAX));[m
[32m+[m[32m        //ÊúÄÂæå‰∏ÄÊó•[m
[32m+[m[32m        if (currentStart < end)[m
[32m+[m[32m        {[m
[32m+[m[32m            currentEnd = currentEnd.CompareAndTakeSmaller(end);[m
[32m+[m[32m            fees.Add(new SingleDayFee(currentStart, currentEnd, CalcFee));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return new ParkingFee(fees);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m    #endregion[m
[32m+[m
[32m+[m[32m    #region Q2 Ë®àÁÆóÂñÆÊó•ÁöÑÂÅúËªäË≤ª[m
[32m+[m[32m    //ÂÖçË≤ªÊôÇÊÆµ[m
[32m+[m[32m    private readonly TimeSpan FREE_TIME = TimeSpan.FromMinutes(10);[m
[32m+[m[32m    //ÊúÄÈ´òÊî∂Ë≤ª[m
[32m+[m[32m    private const int FEE_MAX = 50;[m
[32m+[m[32m    //ËßÄÂØüÈ°åÁõÆË¶èÂæã, ÊØèÂ∞èÊôÇ 10 ÂÖÉ, ÂâçÂçäÂ∞èÊôÇ 7 ÂÖÉ, ÂæåÂçäÂ∞èÊôÇ 3 ÂÖÉ[m
[32m+[m[32m    private const int FEE_HOUR = 10;[m
[32m+[m[32m    private const int FEE_FIRST_HALF_HOUR = 7;[m
[32m+[m
[32m+[m[32m    public int CalcFee(DateTime start, DateTime end)[m
[32m+[m[32m    {[m
[32m+[m[32m        //Êç®ÂéªÂà∞ÂàÜ[m
[32m+[m[32m        start = start.SkipToMinutes();[m
[32m+[m[32m        end = end.SkipToMinutes();[m
[32m+[m
[32m+[m[32m        var stay = end - start;[m
[32m+[m[32m        //ÂÖçË≤ªÊôÇÊÆµÂÖß‰∏çÊî∂Ë≤ª[m
[32m+[m[32m        if (stay <= FREE_TIME) return 0;[m
[32m+[m
[32m+[m[32m        //Á∏ΩÊôÇÊï∏Ë≤ªÁî®[m
[32m+[m[32m        var fee = (int)stay.TotalHours * FEE_HOUR;[m
[32m+[m[32m        //Ââ©È§òÊú™Êªø‰∏ÄÂ∞èÊôÇË≤ªÁî®[m
[32m+[m[32m        if (stay.Minutes > 0) fee += (int)stay.Minutes <= 30 ? FEE_FIRST_HALF_HOUR : FEE_HOUR;[m
[32m+[m[32m        //Ê™¢Êü•ÊúÄÈ´òÊî∂Ë≤ª[m
[32m+[m[32m        return Math.Min(FEE_MAX, fee);[m
[32m+[m[32m    }[m
[32m+[m[32m    #endregion[m
[32m+[m
[32m+[m[32m    #region Q1 Ë®àÁÆóÂÅúËªäÂàÜÈêòÊï∏[m
[32m+[m[32m    public int GetStayMinutes(DateTime start, DateTime end) =>[m
[32m+[m[32m        (int)(end.SkipToMinutes() - start.SkipToMinutes()).TotalMinutes;[m
[32m+[m[32m    #endregion[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mpublic static class Extensions[m
[32m+[m[32m{[m
[32m+[m[32m    public static DateTime SkipToMinutes(this DateTime dateTime) =>[m
[32m+[m[32m        dateTime.Date.AddMinutes((int)dateTime.TimeOfDay.TotalMinutes);[m
[32m+[m[32m    public static DateTime NextDateStart(this DateTime dateTime) =>[m
[32m+[m[32m        dateTime.Date.AddDays(1);[m
[32m+[m[32m    public static DateTime DateEnd(this DateTime dateTime) =>[m
[32m+[m[32m        dateTime.NextDateStart().AddMinutes(-1);[m
[32m+[m[32m    public static DateTime CompareAndTakeSmaller(this DateTime dateTime, DateTime dateTimeToCompare) =>[m
[32m+[m[32m        dateTime < dateTimeToCompare ? dateTime : dateTimeToCompare;[m
[32m+[m[32m}[m
[1mdiff --git a/ParkingPracticeTests/ParkingPracticeTests.csproj b/ParkingPracticeTests/ParkingPracticeTests.csproj[m
[1mnew file mode 100644[m
[1mindex 0000000..e7335aa[m
[1m--- /dev/null[m
[1m+++ b/ParkingPracticeTests/ParkingPracticeTests.csproj[m
[36m@@ -0,0 +1,21 @@[m
[32m+[m[32m<Project Sdk="Microsoft.NET.Sdk">[m
[32m+[m
[32m+[m[32m  <PropertyGroup>[m
[32m+[m[32m    <TargetFramework>net6.0</TargetFramework>[m
[32m+[m[32m    <Nullable>enable</Nullable>[m
[32m+[m
[32m+[m[32m    <IsPackable>false</IsPackable>[m
[32m+[m[32m  </PropertyGroup>[m
[32m+[m
[32m+[m[32m  <ItemGroup>[m
[32m+[m[32m    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.11.0" />[m
[32m+[m[32m    <PackageReference Include="MSTest.TestAdapter" Version="2.2.7" />[m
[32m+[m[32m    <PackageReference Include="MSTest.TestFramework" Version="2.2.7" />[m
[32m+[m[32m    <PackageReference Include="coverlet.collector" Version="3.1.0" />[m
[32m+[m[32m  </ItemGroup>[m
[32m+[m
[32m+[m[32m  <ItemGroup>[m
[32m+[m[32m    <ProjectReference Include="..\ParkingPractice\ParkingPractice.csproj" />[m
[32m+[m[32m  </ItemGroup>[m
[32m+[m
[32m+[m[32m</Project>[m
[1mdiff --git a/ParkingPracticeTests/SolutionTests.cs b/ParkingPracticeTests/SolutionTests.cs[m
[1mnew file mode 100644[m
[1mindex 0000000..e22d3ed[m
[1m--- /dev/null[m
[1m+++ b/ParkingPracticeTests/SolutionTests.cs[m
[36m@@ -0,0 +1,102 @@[m
[32m+[m[32mÔªøusing Microsoft.VisualStudio.TestTools.UnitTesting;[m
[32m+[m[32musing System;[m
[32m+[m
[32m+[m[32mnamespace Tests[m
[32m+[m[32m{[m
[32m+[m[32m    [TestClass()][m
[32m+[m[32m    public class SolutionTests[m
[32m+[m[32m    {[m
[32m+[m[32m        [TestMethod()][m
[32m+[m[32m        [DataRow("00:00:00", "23:59:59", 50, DisplayName = "ÂÖ®Â§©\t50")][m
[32m+[m[32m        [DataRow("09:00:00", "09:00:00", 0, DisplayName = "[0, 10] = 0")][m
[32m+[m[32m        [DataRow("09:00:00", "09:10:59", 0, DisplayName = "[0, 10] = 0")][m
[32m+[m[32m        [DataRow("09:00:00", "09:11:00", 7, DisplayName = "[11, 30] = 7")][m
[32m+[m[32m        [DataRow("09:00:00", "09:30:59", 7, DisplayName = "[11, 30] = 7")][m
[32m+[m[32m        [DataRow("09:00:00", "09:31:00", 10, DisplayName = "[31, 59] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "09:59:59", 10, DisplayName = "[31, 59] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "10:00:59", 10, DisplayName = "[60] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "10:01:00", 17, DisplayName = "[61, 90] = 17")][m
[32m+[m[32m        [DataRow("09:00:00", "10:30:59", 17, DisplayName = "[61, 90] = 17")][m
[32m+[m[32m        [DataRow("09:00:00", "10:31:00", 20, DisplayName = "[91, 119] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "10:59:59", 20, DisplayName = "[91, 119] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "11:00:59", 20, DisplayName = "[120] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "11:01:00", 27, DisplayName = "[121, 150] = 27")][m
[32m+[m[32m        [DataRow("09:00:00", "11:30:59", 27, DisplayName = "[121, 150] = 27")][m
[32m+[m[32m        [DataRow("09:00:00", "11:31:00", 30, DisplayName = "[151, 179] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "11:59:59", 30, DisplayName = "[151, 179] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "12:00:59", 30, DisplayName = "[180] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "12:01:00", 37, DisplayName = "[181, 210] = 37")][m
[32m+[m[32m        [DataRow("09:00:00", "12:30:59", 37, DisplayName = "[181, 210] = 37")][m
[32m+[m[32m        [DataRow("09:00:00", "12:31:00", 40, DisplayName = "[211, 239] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "12:59:59", 40, DisplayName = "[211, 239] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "13:00:59", 40, DisplayName = "[240] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "13:01:00", 47, DisplayName = "[241, 270] = 47")][m
[32m+[m[32m        [DataRow("09:00:00", "13:30:59", 47, DisplayName = "[241, 270] = 47")][m
[32m+[m[32m        [DataRow("09:00:00", "13:31:00", 50, DisplayName = "[271, 299] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "13:59:59", 50, DisplayName = "[271, 299] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:00:59", 50, DisplayName = "[300] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:01:00", 50, DisplayName = "[301, 330] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:30:59", 50, DisplayName = "[301, 330] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:31:00", 50, DisplayName = "[331, 359] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:59:59", 50, DisplayName = "[331, 359] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "15:00:59", 50, DisplayName = "[360] = 50")][m
[32m+[m[32m        public void CalcFeeTest(string start, string end, int expect)[m
[32m+[m[32m        {[m
[32m+[m[32m            Solution solution = new Solution();[m
[32m+[m[32m            int res = solution.CalcFee(DateTime.Parse(start), DateTime.Parse(end));[m
[32m+[m[32m            Assert.AreEqual(expect, res);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        [TestMethod()][m
[32m+[m[32m        [DataRow("00:00:00", "23:59:59", 50, DisplayName = "ÂÖ®Â§©\t50")][m
[32m+[m[32m        [DataRow("09:00:00", "09:00:00", 0, DisplayName = "[0, 10] = 0")][m
[32m+[m[32m        [DataRow("09:00:00", "09:10:59", 0, DisplayName = "[0, 10] = 0")][m
[32m+[m[32m        [DataRow("09:00:00", "09:11:00", 7, DisplayName = "[11, 30] = 7")][m
[32m+[m[32m        [DataRow("09:00:00", "09:30:59", 7, DisplayName = "[11, 30] = 7")][m
[32m+[m[32m        [DataRow("09:00:00", "09:31:00", 10, DisplayName = "[31, 59] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "09:59:59", 10, DisplayName = "[31, 59] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "10:00:59", 10, DisplayName = "[60] = 10")][m
[32m+[m[32m        [DataRow("09:00:00", "10:01:00", 17, DisplayName = "[61, 90] = 17")][m
[32m+[m[32m        [DataRow("09:00:00", "10:30:59", 17, DisplayName = "[61, 90] = 17")][m
[32m+[m[32m        [DataRow("09:00:00", "10:31:00", 20, DisplayName = "[91, 119] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "10:59:59", 20, DisplayName = "[91, 119] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "11:00:59", 20, DisplayName = "[120] = 20")][m
[32m+[m[32m        [DataRow("09:00:00", "11:01:00", 27, DisplayName = "[121, 150] = 27")][m
[32m+[m[32m        [DataRow("09:00:00", "11:30:59", 27, DisplayName = "[121, 150] = 27")][m
[32m+[m[32m        [DataRow("09:00:00", "11:31:00", 30, DisplayName = "[151, 179] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "11:59:59", 30, DisplayName = "[151, 179] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "12:00:59", 30, DisplayName = "[180] = 30")][m
[32m+[m[32m        [DataRow("09:00:00", "12:01:00", 37, DisplayName = "[181, 210] = 37")][m
[32m+[m[32m        [DataRow("09:00:00", "12:30:59", 37, DisplayName = "[181, 210] = 37")][m
[32m+[m[32m        [DataRow("09:00:00", "12:31:00", 40, DisplayName = "[211, 239] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "12:59:59", 40, DisplayName = "[211, 239] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "13:00:59", 40, DisplayName = "[240] = 40")][m
[32m+[m[32m        [DataRow("09:00:00", "13:01:00", 47, DisplayName = "[241, 270] = 47")][m
[32m+[m[32m        [DataRow("09:00:00", "13:30:59", 47, DisplayName = "[241, 270] = 47")][m
[32m+[m[32m        [DataRow("09:00:00", "13:31:00", 50, DisplayName = "[271, 299] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "13:59:59", 50, DisplayName = "[271, 299] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:00:59", 50, DisplayName = "[300] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:01:00", 50, DisplayName = "[301, 330] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:30:59", 50, DisplayName = "[301, 330] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:31:00", 50, DisplayName = "[331, 359] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "14:59:59", 50, DisplayName = "[331, 359] = 50")][m
[32m+[m[32m        [DataRow("09:00:00", "15:00:59", 50, DisplayName = "[360] = 50")][m
[32m+[m[32m        [DataRow("2002/5/1 23:50:00", "2002/5/2 00:10:59", 0, DisplayName = "Ë∑®1Â§©,ÊôÇÈñìÊ•µÁü≠")][m
[32m+[m[32m        [DataRow("2002/5/1 23:48:00", "2002/5/2 00:11:59", 14, DisplayName = "Ë∑®1Â§©,ÂøÖÈúÄ‰ªòË≤ª")][m
[32m+[m[32m        [DataRow("2002/5/1 23:48:00", "2002/5/3 00:11:59", 64, DisplayName = "Ë∑®2Â§©,ÂøÖÈúÄ‰ªòË≤ª")][m
[32m+[m[32m        public void CalcParkingFeeTest(string start, string end, int expect)[m
[32m+[m[32m        {[m
[32m+[m[32m            var parkingFee = new Solution().CalcParkingFee(DateTime.Parse(start), DateTime.Parse(end));[m
[32m+[m[32m            Assert.AreEqual(expect, parkingFee.TotalFee);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        [TestMethod("start < end")][m
[32m+[m[32m        public void CalcParkingFeeExceptionTest()[m
[32m+[m[32m        {[m
[32m+[m[32m            var start = DateTime.Parse("2002/5/1 23:50:00");[m
[32m+[m[32m            var end = DateTime.Parse("2002/5/1 00:10:59");[m
[32m+[m
[32m+[m[32m            Assert.ThrowsException<ArgumentException>(() => new Solution().CalcParkingFee(start, end));[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
